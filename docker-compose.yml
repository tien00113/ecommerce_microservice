services:
  mysql:
    image: mysql:8.0.36
    restart: unless-stopped
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
    # ports:
    #   - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  user-service:
    # build:
    #   context: ./user-service
    #   dockerfile: Dockerfile
    image: tien00113/user-service:1.0
    container_name: user-service
    # ports:
    #   - 8081:8081
    environment:
      - DB_HOST=mysql
      - DB_USER=$MYSQLDB_USER
      - DB_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - DB_NAME=$MYSQLDB_DATABASE
      - DB_PORT=$MYSQLDB_DOCKER_PORT
      - EUREKA_URL=$EUREKA_SERVER_URL
      - LOG_STASH=$LOG_HOST
    depends_on:
      mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
      logstash:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    networks:
      - backend_nw
  product-service:
    # build:
    #   context: ./product-service
    #   dockerfile: Dockerfile
    image: tien00113/product-service:1.0
    container_name: product-service
    environment:
      - DB_HOST=mysql
      - DB_USER=$MYSQLDB_USER
      - DB_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - DB_NAME=$MYSQLDB_DATABASE
      - DB_PORT=$MYSQLDB_DOCKER_PORT
      - EUREKA_URL=$EUREKA_SERVER_URL
      - LOG_STASH=$LOG_HOST
      - ELASTICSEARCH_HOSTS=elasticsearch
      - KAFKA_HOSTS=kafka
      - PRODUCT_SERVICE_URL=http://product-service:8082
      - ORDER_SERVICE_URL=http://order-service:8084
      - REDIS_HOST=redis
    depends_on:
      mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
      logstash:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - backend_nw
  order-service:
    # build:
    #   context: ./order-service
    #   dockerfile: Dockerfile
    image: tien00113/order-service:1.0
    container_name: order-service
    environment:
      - DB_HOST=mysql
      - DB_USER=$MYSQLDB_USER
      - DB_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - DB_NAME=$MYSQLDB_DATABASE
      - DB_PORT=$MYSQLDB_DOCKER_PORT
      - EUREKA_URL=$EUREKA_SERVER_URL
      - LOG_STASH=$LOG_HOST
      - ELASTICSEARCH_HOSTS=elasticsearch
      - KAFKA_HOSTS=kafka
      - PRODUCT_SERVICE_URL=http://product-service:8082
      - PAYMENT_SERVICE_URL=http://payment-service:8083
    depends_on:
      mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
      logstash:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - backend_nw
  payment-service:
    # build:
    #   context: ./payment-service
    #   dockerfile: Dockerfile
    image: tien00113/payment-service:1.0
    container_name: payment-service
    environment:
      - DB_HOST=mysql
      - DB_USER=$MYSQLDB_USER
      - DB_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - DB_NAME=$MYSQLDB_DATABASE
      - DB_PORT=$MYSQLDB_DOCKER_PORT
      - EUREKA_URL=$EUREKA_SERVER_URL
      - LOG_STASH=$LOG_HOST
      - KAFKA_HOSTS=kafka
      - PRODUCT_SERVICE_URL=http://product-service:8082
    depends_on:
      mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
      logstash:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - backend_nw
  service-discovery:
    # build:
    #   context: ./service-discovery
    #   dockerfile: Dockerfile
    image: tien00113/discovery:1.0
    container_name: service-discovery
    # ports:
    #   - 8888:8888
    environment:
      EUREKA_URL: ${EUREKA_SERVER_URL}
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_nw
  api-gateway:
    # build:
    #   context: ./api-gateway
    #   dockerfile: Dockerfile
    image: tien00113/api-gateway:1.0
    container_name: api-gateway
    environment:
      EUREKA_URL: ${EUREKA_SERVER_URL}
    ports:
      - 9000:9000
    depends_on:
      # - mysql
      # - service-discovery
      # - logstash
      # - elasticsearch
      # - kibana
      mysql:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      logstash:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: elasticsearch_microservice
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTICSEARCH_HOSTS=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  kibana:
    container_name: kibana_microservice
    image: docker.elastic.co/kibana/kibana:8.14.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5602:5601
    depends_on:
      # - elasticsearch
      elasticsearch:
        condition: service_healthy
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.1
    container_name: logstash_microservice
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      LOG_HOST: ${LOG_HOST}
    depends_on:
      # - elasticsearch
      elasticsearch:
        condition: service_healthy
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka_microservice
    ports:
      - 9092:9092
      - 9093:9093
      - 9094:9094
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_METADATA_LOG_DIR=/bitnami/kafka/data
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    volumes:
      - ./kafka/data:/bitnami/kafka
    networks:
      - backend_nw
    # healthcheck:
    #   test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 3
  redis:
    image: redis:latest
    container_name: redis_microservice
    volumes:
      - ./redis/data:/data
    ports:
      - 6379:6379
    environment:
      - REDIS_HOST=redis
    networks:
      - backend_nw
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
volumes:
  mysql-data:
networks:
  backend_nw:
    driver: bridge
  backend_nw2:
    driver: local